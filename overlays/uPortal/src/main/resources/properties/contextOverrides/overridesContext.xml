<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to Apereo under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Apereo licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License.  You may obtain a
    copy of the License at the following location:

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd">

    <bean id="defaultLdapContext_target" class="org.springframework.ldap.core.support.LdapContextSource">
      <property name="url" value="${ldap.defaultLdapContext.url}"/>
      <property name="base" value="${ldap.defaultLdapContext.baseDn}"/>
      <property name="userDn" value="${ldap.defaultLdapContext.user}"/>
      <property name="password" value="${ldap.defaultLdapContext.password}"/>
      <property name="pooled" value="false"/>
      <property name="baseEnvironmentProperties">
        <map>
          <entry key="java.naming.referral">
            <value>follow</value>
          </entry>
        </map>
      </property>
    </bean>

    <!-- ********** Data source attribute DAOs **********-->
    <!--
    | Merging DAOs that define the order that the data providing DAOs are called, results are cached by the outer
    | caching DAO
    +-->
    <bean id="mergedPersonAttributeDao"
          class="org.apereo.services.persondir.support.CachingPersonAttributeDaoImpl">
       <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
       <property name="cacheNullResults" value="true" />
       <property name="userInfoCache">
           <bean class="org.apereo.portal.utils.cache.MapCacheFactoryBean">
               <property name="cacheFactory" ref="cacheFactory" />
               <property name="cacheName" value="org.jasig.services.persondir.USER_INFO.merged" />
           </bean>
       </property>
       <property name="cacheKeyGenerator" ref="userAttributeCacheKeyGenerator" />
       <property name="cachedPersonAttributesDao" >
           <bean class="org.apereo.services.persondir.support.MergingPersonAttributeDaoImpl">
               <property name="merger">
                   <!-- This is a "first one wins" strategy. I.e. the first value found for
                   any given result attribute will be assigned to the user. Different values
                   found in subsequently queried attribute sources will be ignored. Suitable
                   if uP-local attributes should always take precedence. Other
                   options (all in the same package):

                       MultivaluedAttributeMerger - Collects values from all DAOs into lists (does not
                         filter out duplicate values, though)
                       ReplacingAttributeAdder - "Last one wins" strategy. I.e. the opposite of
                         NoncollidingAttributeAdder.
                   -->
                   <bean class="org.apereo.services.persondir.support.merger.NoncollidingAttributeAdder" />
               </property>
               <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
               <property name="personAttributeDaos">
                   <list>
                       <!-- Provides a single attribute (but only for the current logged in user):  impersonating='true'|'false' -->
                       <bean class="org.apereo.portal.persondir.ImpersonationStatusPersonAttributeDao" />
                       <bean class="org.apereo.services.persondir.support.CascadingPersonAttributeDao">
                           <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
                           <property name="personAttributeDaos">
                               <list>
                                   <ref bean="uPortalAccountUserSource" />
                                   <ref bean="uPortalJdbcUserSource" />
                               </list>
                           </property>
                       </bean>
                       <!-- ADDITIONAL ATTRIBUTE SOURCES GET ADDED HERE

                       Don't add more sources to the CascadingPersonAttributeDao.personAttributeDaos
                       list above unless you're adding "special" DAOs tasked with augmenting/transforming
                       the attributes generated by uP-local DAOs. (CascadingPersonAttributeDao takes
                       the results from the first-DAO, transforms them into a query, and passes that
                       query to each subsequent DAO. I.e. subsequent DAOs in the cascade list will
                       *not* be given a chance to process the original query. But they will if you add
                       them directly to the MergingPersonAttributeDaoImpl.personAttributeDaos list here.)
                       -->
                       <bean class="org.apereo.services.persondir.support.CascadingPersonAttributeDao">
                           <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
                           <property name="personAttributeDaos">
                             <list>
                                <ref bean="uPortalLdapAttributeSource" />
                                <ref bean="psRolesSource" />
                             </list>
                           </property>
                       </bean>
                   </list>
               </property>
           </bean>
       </property>
    </bean>

    <bean id="uPortalLdapAttributeSource" class="org.apereo.services.persondir.support.ldap.LdapPersonAttributeDao">
        <property name="contextSource" ref="defaultLdapContext" />
        <!--  Enter all keys that you want users to search with in the Directory Search portlet or portal
        search capability. This should contain values from list directoryQueryAttributes in properties/contexts/userContext.xml.
        Key is internal name, value is ldap attribute name.
        -->
        <property name="queryAttributeMapping">
            <map>
                <entry key="username" value="uid" /><!-- should match the uid attribute in your directory;  e.g. sAMAccountName for Active Directory. -->
                <entry key="cn"  value="cn" />
                <entry key="sn" value="sn" />
                <entry key="mail" value="mail" />
            </map>
        </property>
        <property name="queryType" value="OR"/>
            <!-- key is ldap attribute name, values are internal names. -->
            <property name="resultAttributeMapping">
                <map>
                    <entry key="eduPersonPrimaryAffiliation">
                    <value>eduPersonPrimaryAffiliation</value>
                    </entry>
                <entry key="eduPersonAffiliation">
                    <value>eduPersonAffiliation</value>
                    </entry>
                    <entry key="eduPersonNickname">
                <set>
                <value>eduPersonNickname</value>
                <value>user.name.nickName</value>
                </set>
                    </entry>
                <entry key="eduPersonOrgDN">
                    <set>
                      <value>eduPersonOrgDN</value>
                      <value>user.employer</value>
                    </set>
                </entry>
                <entry key="eduPersonOrgUnitDN">
                <set>
                    <value>eduPersonOrgUnitDN</value>
                    <value>user.department</value>
                    </set>
                </entry>
                <entry key="eduPersonPrincipalName">
                    <value>eduPersonPrincipalName</value>
                </entry>
                <entry key="c">
                    <value>c</value>
                </entry>
                <entry key="cn">
                    <value>cn</value>
                </entry>
                <entry key="description">
                    <value>description</value>
                </entry>
                <entry key="displayName">
                    <value>displayName</value>
                </entry>
                <entry key="facsimileTelephoneNumber">
                    <value>facsimileTelephoneNumber</value>
                </entry>
                <entry key="givenName">
                    <set>
                      <value>givenName</value>
                      <value>user.name.given</value>
                    </set>
                </entry>
                <entry key="homePhone">
                    <value>homePhone</value>
                </entry>
                <entry key="homePostalAddress">
                    <value>homePostalAddress</value>
                </entry>
                <entry key="initials">
                    <value>initials</value>
                </entry>
                <entry key="jpegPhoto">
                    <value>jpegPhoto</value>
                </entry>
                <entry key="l">
                    <value>l</value>
                </entry>
                <entry key="labeledURI">
                    <value>labeledURI</value>
                </entry>
                <entry key="mail">
                    <set>
                      <value>mail</value>
                      <value>user.home-info.online.email</value>
                    </set>
                </entry>
                <entry key="mobile">
                    <value>mobile</value>
                </entry>
                <entry key="o">
                    <value>o</value>
                </entry>
                <entry key="ou">
                    <value>ou</value>
                </entry>
                <entry key="pager">
                    <value>pager</value>
                </entry>
                <entry key="postalAddress">
                    <value>postalAddress</value>
                </entry>
                <entry key="postalCode">
                    <value>postalCode</value>
                </entry>
                <entry key="postOfficeBox">
                    <value>postOfficeBox</value>
                </entry>
                <entry key="preferredLanguage">
                    <value>preferredLanguage</value>
                </entry>
                <entry key="seeAlso">
                    <value>seeAlso</value>
                </entry>
                <entry key="sn">
                    <set>
                      <value>sn</value>
                      <value>user.name.family</value>
                    </set>
                </entry>
                <entry key="st">
                    <value>st</value>
                </entry>
                <entry key="street">
                    <value>street</value>
                </entry>
                <entry key="telephoneNumber">
                    <value>telephoneNumber</value>
                </entry>
                <entry key="uid">
                    <set>
                      <value>uid</value>
                      <value>username</value>
                      <value>user.login.id</value>
                    </set>
                </entry>
                <entry key="userCertificate">
                    <value>userCertificate</value>
                </entry>
                <entry key="userSMIMECertificate">
                    <value>userSMIMECertificate</value>
                </entry>
                <entry key="calstateEduPersonEmplID">
                    <value>calstateEduPersonEmplID</value>
                </entry>
                <entry key="memberOf">
                    <value>memberOf</value>
                </entry>
                <entry key="cppEduPersonAffiliation">
                    <value>cppEduPersonAffiliation</value>
                </entry>
            </map>
        </property>
    </bean>

    <bean id="psRolesSource" class="org.apereo.services.persondir.support.CachingPersonAttributeDaoImpl">
        <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
        <property name="cacheNullResults" value="true" />
        <property name="userInfoCache">
            <bean class="org.apereo.portal.utils.cache.MapCacheFactoryBean">
                <property name="cacheFactory" ref="cacheFactory" />
                <property name="cacheName" value="org.apereo.services.persondir.USER_INFO.psroleuser" />
            </bean>
        </property>
        <property name="cacheKeyGenerator" ref="userAttributeCacheKeyGenerator" />
        <property name="cachedPersonAttributesDao" >
            <bean class="org.apereo.services.persondir.support.jdbc.NamedParameterJdbcPersonAttributeDao">
                <property name="dataSource" ref="PortalDb" />
                <property name="sql">
                    <value>
                        SELECT ROLENAME AS psRole
                        FROM CPP_RESTRICTED.PSROLEUSER
                        WHERE ROLEUSER = :calstateEduPersonEmplID
                    </value>
                </property>
                <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
                <property name="userAttributeNames" value="psRole" />
            </bean>
        </property>
    </bean>

    <util:list id="searchServices">

        <!-- Uncomment and fill in your Google Custom Search ID to use
        <bean class="org.apereo.portal.portlets.search.google.GoogleCustomSearchService">
            <property name="customSearchId" value="" />
        </bean>
         -->

        <!-- Uncomment and fill in your Google Search Appliance URL and Site to use -->
        <bean class="edu.cpp.campusapps.SearchServices.gsa.GsaSearchService">
            <property name="baseUrl" value="http://gsa.cpp.edu/search"/>
            <property name="site" value="default_collection"/>
        </bean>

        <!--Toggle one of the next two via comment
        	Marketplace and PortletRegistry search are very similar.  Marketplace provides searching of
        	portlet preferences marked as screen_capture_x and will include a link to the marketplace
        	entry and possibly more to come
         -->

        <bean class="org.apereo.portal.portlets.search.portletregistry.PortletRegistrySearchService"/>

        <!--
        <bean class="org.apereo.portal.portlet.marketplace.MarketplaceSearchService" />
        -->
    </util:list>

    <!--
    | List of event filters to apply to all event listeners that handle newly fired events.
    +-->
    <util:list id="listenerEventFilters">
        <!-- Can be used to filter events based on event type using an instanceof check -->
        <bean class="org.apereo.portal.spring.context.ClassApplicationEventFilter">
            <property name="supportedEvents">
                <list>
                    <value>org.apereo.portal.events.PortalEvent</value>
                </list>
            </property>
            <!-- Can configure a list of events to ignore based on event type using an instanceof check. For example
            if you are using Google Analytics, you can ignore most PortletExecutionEvents (retain
            PortletActionExecutionEvent for logging Search Events for the search terms) and some other Events.
            You may want to retain login, logout, layout changes, Portlet hung, and tenant events.
            Note that the PortletExecutionEvents include information about time to execute the portlet event
            (action, render, event, and resource events) which could be helpful to report on times that
            individual portlets are taking to do their operations.  At the moment though there are currently
            no reports shipping in uPortal to aggregate and report on that information (you could write it and
            contribute it though!).  It is an example of information that Google Analytics would not currently
            report on.
            <property name="ignoredEvents">
                <list>
                    <value>org.apereo.portal.events.PortletEventExecutionEvent</value>
                    <!- - <value>org.apereo.portal.events.PortletActionExecutionEvent</value> retain for Search terms - ->
                    <value>org.apereo.portal.events.PortletRenderExecutionEvent</value>
                    <value>org.apereo.portal.events.PortletRenderHeaderExecutionEvent</value>
                    <value>org.apereo.portal.events.PortletResourceExecutionEvent</value>
                    <value>org.apereo.portal.events.PortalRenderEvent</value>
                </list>
            </property>
            -->
            <property name="ignoredEvents">
                <list>
                    <value>org.apereo.portal.events.PortletEventExecutionEvent</value>
                    <value>org.apereo.portal.events.PortletRenderExecutionEvent</value>
                    <value>org.apereo.portal.events.PortletRenderHeaderExecutionEvent</value>
                    <value>org.apereo.portal.events.PortletResourceExecutionEvent</value>
                </list>
            </property>
        </bean>
        <!-- Can be used to filter events based on who generated the event
        <bean class="org.apereo.portal.events.handlers.UserFilteringPortalEventHandler">
            <property name="ignoredUserNamePatterns">
                <list>
                    <value>user\..*</value>
                    <value>vptest-user.*</value>
                </list>
            </property>
            <property name="supportGuest" value="true" />
        </bean>
        -->
    </util:list>

    <!--
     | Spring-managed instance of Cas20ProxyReceivingTicketValidationFilter.  This setup allows us
     | to configure CAS authentication in the preferred, externalizable way.  (It means we can
     | source configuration settings from the primaryPropertyPlaceholderConfigurer.)
     +-->
    <bean name="ticketValidationFilter" class="org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter">
        <property name="serverName" value="${portal.protocol.server.context}" />
        <property name="encodeServiceUrl" value="false" />
        <property name="proxyReceptorUrl" value="${cas.ticketValidationFilter.proxyReceptorUrl:}" />
        <property name="ticketValidator">
            <bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
                <constructor-arg index="0" value="${cas.ticketValidationFilter.ticketValidator.server}" />
                <property name="proxyCallbackUrl" value="${cas.ticketValidationFilter.ticketValidator.proxyCallbackUrl:}" />
            </bean>
        </property>
        <!--
         | For CAS PGT replication for CAS ClearPass in a clustered uPortal environment.
         | See "Replicating PGT using "proxyGrantingTicketStorageClass" and Distributed Caching" in
         | https://wiki.jasig.org/display/CASC/Configuring+the+Jasig+CAS+Client+for+Java+in+the+web.xml.
         | If CAS ClearPass is not enabled in security.properties, this parameter has no effect.
         +-->
        <property name="proxyGrantingTicketStorage">
            <bean class="org.jasig.cas.client.proxy.EhcacheBackedProxyGrantingTicketStorageImpl" />
        </property>
    </bean>

</beans>
