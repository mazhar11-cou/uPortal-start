<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd">

    <!-- ********** Data source attribute DAOs **********-->
    <!--
    | Merging DAOs that define the order that the data providing DAOs are called, results are cached by the outer
    | caching DAO
    +-->
    <bean id="mergedPersonAttributeDao"
          class="org.apereo.services.persondir.support.CachingPersonAttributeDaoImpl">
       <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
       <property name="cacheNullResults" value="true" />
       <property name="userInfoCache">
           <bean class="org.apereo.portal.utils.cache.MapCacheFactoryBean">
               <property name="cacheFactory" ref="cacheFactory" />
               <property name="cacheName" value="org.jasig.services.persondir.USER_INFO.merged" />
           </bean>
       </property>
       <property name="cacheKeyGenerator" ref="userAttributeCacheKeyGenerator" />
       <property name="cachedPersonAttributesDao" >
           <bean class="org.apereo.services.persondir.support.MergingPersonAttributeDaoImpl">
               <property name="merger">
                   <!-- This is a "first one wins" strategy. I.e. the first value found for
                   any given result attribute will be assigned to the user. Different values
                   found in subsequently queried attribute sources will be ignored. Suitable
                   if uP-local attributes should always take precedence. Other
                   options (all in the same package):

                       MultivaluedAttributeMerger - Collects values from all DAOs into lists (does not
                         filter out duplicate values, though)
                       ReplacingAttributeAdder - "Last one wins" strategy. I.e. the opposite of
                         NoncollidingAttributeAdder.
                   -->
                   <bean class="org.apereo.services.persondir.support.merger.NoncollidingAttributeAdder" />
               </property>
               <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
               <property name="personAttributeDaos">
                   <list>
                       <!-- Provides a single attribute (but only for the current logged in user):  impersonating='true'|'false' -->
                       <bean class="org.apereo.portal.persondir.ImpersonationStatusPersonAttributeDao" />
                       <bean class="org.apereo.services.persondir.support.CascadingPersonAttributeDao">
                           <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
                           <property name="personAttributeDaos">
                               <list>
                                   <ref bean="uPortalAccountUserSource" />
                                   <ref bean="uPortalJdbcUserSource" />
                               </list>
                           </property>
                       </bean>
                       <!-- ADDITIONAL ATTRIBUTE SOURCES GET ADDED HERE

                       Don't add more sources to the CascadingPersonAttributeDao.personAttributeDaos
                       list above unless you're adding "special" DAOs tasked with augmenting/transforming
                       the attributes generated by uP-local DAOs. (CascadingPersonAttributeDao takes
                       the results from the first-DAO, transforms them into a query, and passes that
                       query to each subsequent DAO. I.e. subsequent DAOs in the cascade list will
                       *not* be given a chance to process the original query. But they will if you add
                       them directly to the MergingPersonAttributeDaoImpl.personAttributeDaos list here.)
                       -->
                       <bean class="org.apereo.services.persondir.support.CascadingPersonAttributeDao">
                           <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
                           <property name="personAttributeDaos">
                             <list>
                                <ref bean="uPortalLdapAttributeSource" />
                                <!-- See psRolesSource.xml -->
                                <ref bean="psRolesSource" />
                             </list>
                           </property>
                       </bean>
                   </list>
               </property>
           </bean>
       </property>
    </bean>

</beans>
