import org.apereo.portal.start.gradle.plugins.GradleImportExportPlugin
import org.apereo.portal.start.gradle.plugins.GradlePlutoPlugin

apply plugin: GradleImportExportPlugin
apply plugin: GradlePlutoPlugin

dependencies {
    runtime "org.jasig.portlet:NewsReaderPortlet:${newsReaderPortletVersion}@war"
    compile configurations.jdbc
}

war {
    archiveName 'NewsReaderPortlet.war'
    /*
     * For uPortal 5 (and beyond), the Community Best Practice for WAR files published to Maven
     * Central is that they should *not* contain JDBC driver jars;  all such WAR files are
     * implemented locally by "overlaying" them, and it is the responsibility of they overlaying
     * project (here uPortal-start) to provide them with the appropriate drivers.  When the
     * published artifacts already contain drivers, the danger of conflicting versions is very
     * high.
     *
     * Nevertheless, earlier versions of uPortal and Apereo portlets *do* contain JDBC drivers,
     * specifically HSQLDB.  The following exclusion prevents the copy of this driver contained
     * within the published WAR file from being deployed.  Please remove this line when the
     * published artifact reliably omits the HSQLDB driver.
     *
     * See https://github.com/Jasig/uPortal-start/pull/120
     */
    exclude 'WEB-INF/lib/hsqldb-*.jar'
}

/*
 * Import/Export Support
 */

import org.apereo.portal.start.shell.PortalShellInvoker

dependencies {
    impexp configurations.jdbc
    impexp "${portletApiDependency}"
    impexp "${servletApiDependency}"
}

dataInit {
    /*
     * Drop (if present) then create the Hibernate-managed schema.
     */
    doLast {
        File serverBase = rootProject.file(rootProject.ext['buildProperties'].getProperty('server.base'))
        File deployDir = new File (serverBase, "webapps/${project.name}")

        /*
         * The following specifies failonerror=false because it will produce an exception like...
         *
         * java.sql.SQLSyntaxErrorException: a FOREIGN KEY constraint already exists on the set
         *     of columns: FK6B30F46A9BF7DB25 in statement [alter table NEWS_CONFIGURATION add
         *     constraint FK6B30F46A9BF7DB25 foreign key (NEWS_ID) references NEWS_DEFINITION]
         *
         * Yet the schema will be created (as well as it ever was).
         *
         * The issue appears to stem from the fact that the NEWS_ID column is declared for
         * both subclasses, but differently, in NewsConfiguration.hbm.xml.
         */
        ant.setLifecycleLogLevel('INFO')
        ant.java(fork: true, failonerror: false, dir: rootProject.projectDir, classname: 'org.jasig.portlet.newsreader.util.SchemaCreator') {
            classpath {
                pathelement(location: "${deployDir}/WEB-INF/classes")
                pathelement(location: "${deployDir}/WEB-INF/lib/*")
                project.configurations.impexp.files.each {
                    pathelement(location: it.absolutePath)
                }
            }
            sysproperty(key: 'portal.home', value: project.rootProject.ext['buildProperties'].getProperty('portal.home'))
            sysproperty(key: 'logback.configurationFile', value: 'command-line.logback.xml')
        }
    }
    /*
     * Import database entities located anywhere within the folder
     * specified by 'implementation.entities.location'.
     */
    doLast {
        File serverBase = rootProject.file(rootProject.ext['buildProperties'].getProperty('server.base'))
        File deployDir = new File (serverBase, "webapps/${project.name}")
        String implementationEntitiesLocation = PortalShellInvoker.createGroovySafePath(rootProject.ext['buildProperties'].getProperty('implementation.entities.location'))

        ant.setLifecycleLogLevel('INFO')
        ant.java(fork: true, failonerror: true, dir: rootProject.projectDir, classname: 'org.danann.cernunnos.runtime.Main') {
            classpath {
                pathelement(location: "${deployDir}/WEB-INF/classes")
                pathelement(location: "${deployDir}/WEB-INF/lib/*")
                project.configurations.impexp.files.each {
                    pathelement(location: it.absolutePath)
                }
            }
            sysproperty(key: 'portal.home', value: project.rootProject.ext['buildProperties'].getProperty('portal.home'))
            sysproperty(key: 'logback.configurationFile', value: 'command-line.logback.xml')
            arg(value: 'classpath://org/jasig/portlet/newsreader/io/import.crn.xml')
            arg(value: "${implementationEntitiesLocation}")
        }
    }
}
